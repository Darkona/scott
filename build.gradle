plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.darkona'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {

    mavenCentral()
    mavenLocal()
}

configurations {
    agentJars {
        transitive = false
    }
}

bootJar {
    //renames output jar to 'app.jar' so the dockerfile doesn't need to change if version changes
    archiveFileName = "app.jar"
}
tasks.named("processResources") {
    // Dispara el copiado de agentes cuando corra processResources
    finalizedBy("stageAgents")
}
dependencyManagement {

    imports {
        mavenBom("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.19.0")
    }
}
dependencies {
    implementation "io.github.darkona:logged:1.5.0"
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'com.github.loki4j:loki-protobuf:0.0.2_pb4.31.0'
    implementation 'com.github.loki4j:loki-logback-appender:2.0.0'
    implementation "net.logstash.logback:logstash-logback-encoder:8.1"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'io.micrometer:micrometer-registry-otlp'

    //enables prometheus actuator endpoint for scraping
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    agentJars 'io.opentelemetry.javaagent:opentelemetry-javaagent:2.19.0'
    implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter")

    agentJars 'org.aspectj:aspectjweaver:1.9.24'
}
def agentsOut = layout.buildDirectory.dir("agents")

tasks.register("stageAgents", Copy) {
    // ResoluciÃ³n diferida y cache-friendly
    from({
        configurations.agentJars.resolve()
    }) {
        // Renombrar a nombres estables
        eachFile { f ->
            if (f.name.startsWith("aspectjweaver")) {
                f.name = "aspectjweaver.jar"
            } else if (f.name.startsWith("opentelemetry-javaagent")) {
                f.name = "opentelemetry.jar"
            }
        }
        includeEmptyDirs = false
    }
    into(agentsOut)
}
springBoot {
    mainClass = "com.darkona.scott.ScottApplication"  // <-- your @SpringBootApplication
}

//Copies the agent jars from the configuration, to the agents folder in the build output.
//These jars can then be copied to the container (see Dockerfile)

bootRun {
    dependsOn(stageAgents)
    doFirst {
        // Prefiere usar los jars staged (deterministas)
        def dir = agentsOut.get().asFile
        def aj = new File(dir, "aspectjweaver.jar")
        def ot = new File(dir, "opentelemetry.jar")

        if (!aj.exists() || !ot.exists()) {
            def resolved = configurations.agentJars.resolve()
            def fallbackAj = resolved.find { it.name.startsWith("aspectjweaver") }
            def fallbackOt = resolved.find { it.name.startsWith("opentelemetry") }
            if (!fallbackAj || !fallbackOt) {
                throw new GradleException("No pude localizar los agentes (AspectJ/OTel). Ejecuta primero :processResources o revisa agentJars.")
            }
            jvmArgs(
                    "-javaagent:${fallbackAj.absolutePath}",
                    "-javaagent:${fallbackOt.absolutePath}",

            )
        } else {
            jvmArgs(
                    "-javaagent:${aj.absolutePath}",
                    "-javaagent:${ot.absolutePath}"
            )
        }
    }
}
